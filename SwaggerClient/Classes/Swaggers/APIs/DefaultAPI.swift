//
// DefaultAPI.swift
//
// Generated by swagger-codegen
// https://github.com/swagger-api/swagger-codegen
//

import Alamofire



public class DefaultAPI: APIBase {
    /**

     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func allGet(completion: ((data: [InventoryGroup]?, error: ErrorType?) -> Void)) {
        allGetWithRequestBuilder().execute { (response, error) -> Void in
            completion(data: response?.body, error: error);
        }
    }


    /**
     - GET /all/
     - API Key:
       - type: apiKey APIKey 
       - name: APIKey
     - API Key:
       - type: apiKey accountid 
       - name: AccountID
     - examples: [{contentType=application/json, example=[ {
  "name" : "aeiou",
  "items" : [ {
    "quantity" : "aeiou",
    "ordprice" : 1.3579000000000001069366817318950779736042022705078125,
    "price" : "aeiou",
    "Buy" : "aeiou",
    "name" : "aeiou",
    "id" : "aeiou",
    "media" : [ "aeiou" ],
    "category" : "aeiou",
    "desc" : "aeiou"
  } ]
} ]}]

     - returns: RequestBuilder<[InventoryGroup]> 
     */
    public class func allGetWithRequestBuilder() -> RequestBuilder<[InventoryGroup]> {
        let path = "/all/"
        let URLString = SwaggerClientAPI.basePath + path

        let nillableParameters: [String:AnyObject?] = [:]
 
        let parameters = APIHelper.rejectNil(nillableParameters)
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<[InventoryGroup]>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: URLString, parameters: convertedParameters, isBody: true)
    }

    /**

     - parameter id: (query) Id of category to remove 
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func categoriesDelete(id id: String, completion: ((data: Response?, error: ErrorType?) -> Void)) {
        categoriesDeleteWithRequestBuilder(id: id).execute { (response, error) -> Void in
            completion(data: response?.body, error: error);
        }
    }


    /**
     - DELETE /categories/
     - API Key:
       - type: apiKey APIKey 
       - name: APIKey
     - API Key:
       - type: apiKey accountid 
       - name: AccountID
     - examples: [{contentType=application/json, example={
  "approved" : 1.3579000000000001069366817318950779736042022705078125
}}]
     
     - parameter id: (query) Id of category to remove 

     - returns: RequestBuilder<Response> 
     */
    public class func categoriesDeleteWithRequestBuilder(id id: String) -> RequestBuilder<Response> {
        let path = "/categories/"
        let URLString = SwaggerClientAPI.basePath + path

        let nillableParameters: [String:AnyObject?] = [
            "id": id
        ]
 
        let parameters = APIHelper.rejectNil(nillableParameters)
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<Response>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "DELETE", URLString: URLString, parameters: convertedParameters, isBody: false)
    }

    /**

     - parameter query: (body) Category to query against system (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func categoriesPost(query query: Dictionary? = nil, completion: ((data: [Category]?, error: ErrorType?) -> Void)) {
        categoriesPostWithRequestBuilder(query: query).execute { (response, error) -> Void in
            completion(data: response?.body, error: error);
        }
    }


    /**
     - POST /categories/
     - API Key:
       - type: apiKey APIKey 
       - name: APIKey
     - API Key:
       - type: apiKey accountid 
       - name: AccountID
     - examples: [{contentType=application/json, example=[ {
  "parent" : "aeiou",
  "name" : "aeiou",
  "id" : "aeiou"
} ]}]
     
     - parameter query: (body) Category to query against system (optional)

     - returns: RequestBuilder<[Category]> 
     */
    public class func categoriesPostWithRequestBuilder(query query: Dictionary? = nil) -> RequestBuilder<[Category]> {
        let path = "/categories/"
        let URLString = SwaggerClientAPI.basePath + path
        let parameters = query?.encodeToJSON() as? [String:AnyObject]
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<[Category]>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: URLString, parameters: convertedParameters, isBody: true)
    }

    /**

     - parameter id: (query) category id to update. 
     - parameter category: (body) New category information. 
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func categoriesPut(id id: String, category: Category, completion: ((data: Category?, error: ErrorType?) -> Void)) {
        categoriesPutWithRequestBuilder(id: id, category: category).execute { (response, error) -> Void in
            completion(data: response?.body, error: error);
        }
    }


    /**
     - PUT /categories/
     - If no ID is specified a new category will be created!
     - API Key:
       - type: apiKey APIKey 
       - name: APIKey
     - API Key:
       - type: apiKey accountid 
       - name: AccountID
     - examples: [{contentType=application/json, example={
  "parent" : "aeiou",
  "name" : "aeiou",
  "id" : "aeiou"
}}]
     
     - parameter id: (query) category id to update. 
     - parameter category: (body) New category information. 

     - returns: RequestBuilder<Category> 
     */
    public class func categoriesPutWithRequestBuilder(id id: String, category: Category) -> RequestBuilder<Category> {
        let path = "/categories/"
        let URLString = SwaggerClientAPI.basePath + path
        let parameters = category.encodeToJSON() as? [String:AnyObject]
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<Category>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "PUT", URLString: URLString, parameters: convertedParameters, isBody: false)
    }

    /**

     - parameter item: (body) Item to create. 
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func itemAddPost(item item: Item, completion: ((data: Item?, error: ErrorType?) -> Void)) {
        itemAddPostWithRequestBuilder(item: item).execute { (response, error) -> Void in
            completion(data: response?.body, error: error);
        }
    }


    /**
     - POST /item/add/
     - API Key:
       - type: apiKey APIKey 
       - name: APIKey
     - API Key:
       - type: apiKey accountid 
       - name: AccountID
     - examples: [{contentType=application/json, example={
  "quantity" : "aeiou",
  "ordprice" : 1.3579000000000001069366817318950779736042022705078125,
  "price" : "aeiou",
  "Buy" : "aeiou",
  "name" : "aeiou",
  "id" : "aeiou",
  "media" : [ "aeiou" ],
  "category" : "aeiou",
  "desc" : "aeiou"
}}]
     
     - parameter item: (body) Item to create. 

     - returns: RequestBuilder<Item> 
     */
    public class func itemAddPostWithRequestBuilder(item item: Item) -> RequestBuilder<Item> {
        let path = "/item/add/"
        let URLString = SwaggerClientAPI.basePath + path
        let parameters = item.encodeToJSON() as? [String:AnyObject]
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<Item>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: URLString, parameters: convertedParameters, isBody: true)
    }

    /**

     - parameter items: (body) Items to create. 
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func itemAddbulkPost(items items: [Item], completion: ((data: Response?, error: ErrorType?) -> Void)) {
        itemAddbulkPostWithRequestBuilder(items: items).execute { (response, error) -> Void in
            completion(data: response?.body, error: error);
        }
    }


    /**
     - POST /item/addbulk/
     - API Key:
       - type: apiKey APIKey 
       - name: APIKey
     - API Key:
       - type: apiKey accountid 
       - name: AccountID
     - examples: [{contentType=application/json, example={
  "approved" : 1.3579000000000001069366817318950779736042022705078125
}}]
     
     - parameter items: (body) Items to create. 

     - returns: RequestBuilder<Response> 
     */
    public class func itemAddbulkPostWithRequestBuilder(items items: [Item]) -> RequestBuilder<Response> {
        let path = "/item/addbulk/"
        let URLString = SwaggerClientAPI.basePath + path
        let parameters = items.encodeToJSON() as? [String:AnyObject]
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<Response>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: URLString, parameters: convertedParameters, isBody: true)
    }

    /**

     - parameter id: (query) item id to remove 
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func itemDelete(id id: String, completion: ((data: Response?, error: ErrorType?) -> Void)) {
        itemDeleteWithRequestBuilder(id: id).execute { (response, error) -> Void in
            completion(data: response?.body, error: error);
        }
    }


    /**
     - DELETE /item/
     - API Key:
       - type: apiKey APIKey 
       - name: APIKey
     - API Key:
       - type: apiKey accountid 
       - name: AccountID
     - examples: [{contentType=application/json, example={
  "approved" : 1.3579000000000001069366817318950779736042022705078125
}}]
     
     - parameter id: (query) item id to remove 

     - returns: RequestBuilder<Response> 
     */
    public class func itemDeleteWithRequestBuilder(id id: String) -> RequestBuilder<Response> {
        let path = "/item/"
        let URLString = SwaggerClientAPI.basePath + path

        let nillableParameters: [String:AnyObject?] = [
            "id": id
        ]
 
        let parameters = APIHelper.rejectNil(nillableParameters)
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<Response>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "DELETE", URLString: URLString, parameters: convertedParameters, isBody: false)
    }

    /**

     - parameter id: (query) item id to update. 
     - parameter item: (body) New item information. 
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func itemPut(id id: String, item: Dictionary, completion: ((data: Response?, error: ErrorType?) -> Void)) {
        itemPutWithRequestBuilder(id: id, item: item).execute { (response, error) -> Void in
            completion(data: response?.body, error: error);
        }
    }


    /**
     - PUT /item/
     - API Key:
       - type: apiKey APIKey 
       - name: APIKey
     - API Key:
       - type: apiKey accountid 
       - name: AccountID
     - examples: [{contentType=application/json, example={
  "approved" : 1.3579000000000001069366817318950779736042022705078125
}}]
     
     - parameter id: (query) item id to update. 
     - parameter item: (body) New item information. 

     - returns: RequestBuilder<Response> 
     */
    public class func itemPutWithRequestBuilder(id id: String, item: Dictionary) -> RequestBuilder<Response> {
        let path = "/item/"
        let URLString = SwaggerClientAPI.basePath + path
        let parameters = item.encodeToJSON() as? [String:AnyObject]
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<Response>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "PUT", URLString: URLString, parameters: convertedParameters, isBody: false)
    }

    /**

     - parameter query: (body) Item to query against system. (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func itemsCountPost(query query: Dictionary? = nil, completion: ((data: Double?, error: ErrorType?) -> Void)) {
        itemsCountPostWithRequestBuilder(query: query).execute { (response, error) -> Void in
            completion(data: response?.body, error: error);
        }
    }


    /**
     - POST /items/count/
     - API Key:
       - type: apiKey APIKey 
       - name: APIKey
     - API Key:
       - type: apiKey accountid 
       - name: AccountID
     - examples: [{contentType=application/json, example=1.3579000000000001069366817318950779736042022705078125}]
     
     - parameter query: (body) Item to query against system. (optional)

     - returns: RequestBuilder<Double> 
     */
    public class func itemsCountPostWithRequestBuilder(query query: Dictionary? = nil) -> RequestBuilder<Double> {
        let path = "/items/count/"
        let URLString = SwaggerClientAPI.basePath + path
        let parameters = query?.encodeToJSON() as? [String:AnyObject]
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<Double>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: URLString, parameters: convertedParameters, isBody: true)
    }

    /**

     - parameter query: (body) Item to query against system. (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func itemsPost(query query: Dictionary? = nil, completion: ((data: [Item]?, error: ErrorType?) -> Void)) {
        itemsPostWithRequestBuilder(query: query).execute { (response, error) -> Void in
            completion(data: response?.body, error: error);
        }
    }


    /**
     - POST /items/
     - API Key:
       - type: apiKey APIKey 
       - name: APIKey
     - API Key:
       - type: apiKey accountid 
       - name: AccountID
     - examples: [{contentType=application/json, example=[ {
  "quantity" : "aeiou",
  "ordprice" : 1.3579000000000001069366817318950779736042022705078125,
  "price" : "aeiou",
  "Buy" : "aeiou",
  "name" : "aeiou",
  "id" : "aeiou",
  "media" : [ "aeiou" ],
  "category" : "aeiou",
  "desc" : "aeiou"
} ]}]
     
     - parameter query: (body) Item to query against system. (optional)

     - returns: RequestBuilder<[Item]> 
     */
    public class func itemsPostWithRequestBuilder(query query: Dictionary? = nil) -> RequestBuilder<[Item]> {
        let path = "/items/"
        let URLString = SwaggerClientAPI.basePath + path
        let parameters = query?.encodeToJSON() as? [String:AnyObject]
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<[Item]>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: URLString, parameters: convertedParameters, isBody: true)
    }

    /**

     - parameter query: (body) Item to query against system. (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func itemsallfieldsPost(query query: Dictionary? = nil, completion: ((data: [Dictionary]?, error: ErrorType?) -> Void)) {
        itemsallfieldsPostWithRequestBuilder(query: query).execute { (response, error) -> Void in
            completion(data: response?.body, error: error);
        }
    }


    /**
     - POST /items/?allfields
     - API Key:
       - type: apiKey APIKey 
       - name: APIKey
     - API Key:
       - type: apiKey accountid 
       - name: AccountID
     - examples: [{contentType=application/json, example=[ { } ]}]
     
     - parameter query: (body) Item to query against system. (optional)

     - returns: RequestBuilder<[Dictionary]> 
     */
    public class func itemsallfieldsPostWithRequestBuilder(query query: Dictionary? = nil) -> RequestBuilder<[Dictionary]> {
        let path = "/items/?allfields"
        let URLString = SwaggerClientAPI.basePath + path
        let parameters = query?.encodeToJSON() as? [String:AnyObject]
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<[Dictionary]>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: URLString, parameters: convertedParameters, isBody: true)
    }

    /**

     - parameter query: (body) Order to query against system. (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func ordersPost(query query: Dictionary? = nil, completion: ((data: [Order]?, error: ErrorType?) -> Void)) {
        ordersPostWithRequestBuilder(query: query).execute { (response, error) -> Void in
            completion(data: response?.body, error: error);
        }
    }


    /**
     - POST /orders/
     - API Key:
       - type: apiKey APIKey 
       - name: APIKey
     - API Key:
       - type: apiKey accountid 
       - name: AccountID
     - examples: [{contentType=application/json, example=[ {
  "tax_amount" : 1.3579000000000001069366817318950779736042022705078125,
  "info_first" : "aeiou",
  "info_last" : "aeiou",
  "shipset" : true,
  "itemIDs" : [ "aeiou" ],
  "amount_total" : 1.3579000000000001069366817318950779736042022705078125,
  "info_scty" : "aeiou",
  "info_zip" : "aeiou",
  "shipping_amount" : 1.3579000000000001069366817318950779736042022705078125,
  "info_adr1" : "aeiou",
  "info_adr2" : "aeiou",
  "info_sadr2" : "aeiou",
  "phone" : "aeiou",
  "info_sadr1" : "aeiou",
  "info_szip" : "aeiou",
  "sstate" : "aeiou",
  "info_cty" : "aeiou",
  "info_email" : "aeiou",
  "state" : "aeiou",
  "order_id" : "aeiou"
} ]}]
     
     - parameter query: (body) Order to query against system. (optional)

     - returns: RequestBuilder<[Order]> 
     */
    public class func ordersPostWithRequestBuilder(query query: Dictionary? = nil) -> RequestBuilder<[Order]> {
        let path = "/orders/"
        let URLString = SwaggerClientAPI.basePath + path
        let parameters = query?.encodeToJSON() as? [String:AnyObject]
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<[Order]>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: URLString, parameters: convertedParameters, isBody: true)
    }

    /**

     - parameter page: (query) Current page index. (optional)
     - parameter categoryid: (query) Get items under specified category id. (optional)
     - parameter sort: (query) Comma delimited Sort string. ie ; +ordprice. Please use number based fields only (optional)
     - parameter search: (query) Performs a regex pattern match against the items within your account (optional)
     - parameter minprice: (query) Min price in hundreds. (optional)
     - parameter maxprice: (query) Max price in hudreds. (optional)
     - parameter query: (body) Custom parameters to query against system. (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func queryPost(page page: Double? = nil, categoryid: String? = nil, sort: String? = nil, search: String? = nil, minprice: Double? = nil, maxprice: Double? = nil, query: Dictionary? = nil, completion: ((data: [Item]?, error: ErrorType?) -> Void)) {
        queryPostWithRequestBuilder(page: page, categoryid: categoryid, sort: sort, search: search, minprice: minprice, maxprice: maxprice, query: query).execute { (response, error) -> Void in
            completion(data: response?.body, error: error);
        }
    }


    /**
     - POST /query/
     - API Key:
       - type: apiKey APIKey 
       - name: APIKey
     - API Key:
       - type: apiKey accountid 
       - name: AccountID
     - examples: [{contentType=application/json, example=[ {
  "quantity" : "aeiou",
  "ordprice" : 1.3579000000000001069366817318950779736042022705078125,
  "price" : "aeiou",
  "Buy" : "aeiou",
  "name" : "aeiou",
  "id" : "aeiou",
  "media" : [ "aeiou" ],
  "category" : "aeiou",
  "desc" : "aeiou"
} ]}]
     
     - parameter page: (query) Current page index. (optional)
     - parameter categoryid: (query) Get items under specified category id. (optional)
     - parameter sort: (query) Comma delimited Sort string. ie ; +ordprice. Please use number based fields only (optional)
     - parameter search: (query) Performs a regex pattern match against the items within your account (optional)
     - parameter minprice: (query) Min price in hundreds. (optional)
     - parameter maxprice: (query) Max price in hudreds. (optional)
     - parameter query: (body) Custom parameters to query against system. (optional)

     - returns: RequestBuilder<[Item]> 
     */
    public class func queryPostWithRequestBuilder(page page: Double? = nil, categoryid: String? = nil, sort: String? = nil, search: String? = nil, minprice: Double? = nil, maxprice: Double? = nil, query: Dictionary? = nil) -> RequestBuilder<[Item]> {
        let path = "/query/"
        let URLString = SwaggerClientAPI.basePath + path
        let parameters = query?.encodeToJSON() as? [String:AnyObject]
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<[Item]>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: URLString, parameters: convertedParameters, isBody: false)
    }

    /**

     - parameter page: (query) Current page index. (optional)
     - parameter categoryid: (query) Get items under specified category id. (optional)
     - parameter sort: (query) Comma delimited Sort string. ie ; +ordprice. Please use number based fields only (optional)
     - parameter search: (query) Performs a regex pattern match against the items within your account (optional)
     - parameter minprice: (query) Min price in hundreds. (optional)
     - parameter maxprice: (query) Max price in hudreds. (optional)
     - parameter query: (body) Custom parameters to query against system. (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func queryallfieldsPost(page page: Double? = nil, categoryid: String? = nil, sort: String? = nil, search: String? = nil, minprice: Double? = nil, maxprice: Double? = nil, query: Dictionary? = nil, completion: ((data: [Dictionary]?, error: ErrorType?) -> Void)) {
        queryallfieldsPostWithRequestBuilder(page: page, categoryid: categoryid, sort: sort, search: search, minprice: minprice, maxprice: maxprice, query: query).execute { (response, error) -> Void in
            completion(data: response?.body, error: error);
        }
    }


    /**
     - POST /query/?allfields
     - API Key:
       - type: apiKey APIKey 
       - name: APIKey
     - API Key:
       - type: apiKey accountid 
       - name: AccountID
     - examples: [{contentType=application/json, example=[ { } ]}]
     
     - parameter page: (query) Current page index. (optional)
     - parameter categoryid: (query) Get items under specified category id. (optional)
     - parameter sort: (query) Comma delimited Sort string. ie ; +ordprice. Please use number based fields only (optional)
     - parameter search: (query) Performs a regex pattern match against the items within your account (optional)
     - parameter minprice: (query) Min price in hundreds. (optional)
     - parameter maxprice: (query) Max price in hudreds. (optional)
     - parameter query: (body) Custom parameters to query against system. (optional)

     - returns: RequestBuilder<[Dictionary]> 
     */
    public class func queryallfieldsPostWithRequestBuilder(page page: Double? = nil, categoryid: String? = nil, sort: String? = nil, search: String? = nil, minprice: Double? = nil, maxprice: Double? = nil, query: Dictionary? = nil) -> RequestBuilder<[Dictionary]> {
        let path = "/query/?allfields"
        let URLString = SwaggerClientAPI.basePath + path
        let parameters = query?.encodeToJSON() as? [String:AnyObject]
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<[Dictionary]>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: URLString, parameters: convertedParameters, isBody: false)
    }

    /**

     - parameter id: (query) ID of the service to update 
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func servicesDelete(id id: String, completion: ((data: Response?, error: ErrorType?) -> Void)) {
        servicesDeleteWithRequestBuilder(id: id).execute { (response, error) -> Void in
            completion(data: response?.body, error: error);
        }
    }


    /**
     - DELETE /services/
     - API Key:
       - type: apiKey APIKey 
       - name: APIKey
     - API Key:
       - type: apiKey accountid 
       - name: AccountID
     - examples: [{contentType=application/json, example={
  "approved" : 1.3579000000000001069366817318950779736042022705078125
}}]
     
     - parameter id: (query) ID of the service to update 

     - returns: RequestBuilder<Response> 
     */
    public class func servicesDeleteWithRequestBuilder(id id: String) -> RequestBuilder<Response> {
        let path = "/services/"
        let URLString = SwaggerClientAPI.basePath + path

        let nillableParameters: [String:AnyObject?] = [
            "id": id
        ]
 
        let parameters = APIHelper.rejectNil(nillableParameters)
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<Response>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "DELETE", URLString: URLString, parameters: convertedParameters, isBody: false)
    }

    /**

     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func servicesGet(completion: ((data: [Service]?, error: ErrorType?) -> Void)) {
        servicesGetWithRequestBuilder().execute { (response, error) -> Void in
            completion(data: response?.body, error: error);
        }
    }


    /**
     - GET /services/
     - API Key:
       - type: apiKey APIKey 
       - name: APIKey
     - API Key:
       - type: apiKey accountid 
       - name: AccountID
     - examples: [{contentType=application/json, example=[ {
  "recurpric" : "aeiou",
  "price" : "aeiou",
  "name" : "aeiou",
  "event" : {
    "postbody" : { },
    "serviceid" : "aeiou",
    "url" : "aeiou"
  },
  "desc" : "aeiou"
} ]}]

     - returns: RequestBuilder<[Service]> 
     */
    public class func servicesGetWithRequestBuilder() -> RequestBuilder<[Service]> {
        let path = "/services/"
        let URLString = SwaggerClientAPI.basePath + path

        let nillableParameters: [String:AnyObject?] = [:]
 
        let parameters = APIHelper.rejectNil(nillableParameters)
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<[Service]>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: URLString, parameters: convertedParameters, isBody: true)
    }

    /**

     - parameter service: (body) Service to create. 
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func servicesPost(service service: Service, completion: ((data: Service?, error: ErrorType?) -> Void)) {
        servicesPostWithRequestBuilder(service: service).execute { (response, error) -> Void in
            completion(data: response?.body, error: error);
        }
    }


    /**
     - POST /services/
     - API Key:
       - type: apiKey APIKey 
       - name: APIKey
     - API Key:
       - type: apiKey accountid 
       - name: AccountID
     - examples: [{contentType=application/json, example={
  "recurpric" : "aeiou",
  "price" : "aeiou",
  "name" : "aeiou",
  "event" : {
    "postbody" : { },
    "serviceid" : "aeiou",
    "url" : "aeiou"
  },
  "desc" : "aeiou"
}}]
     
     - parameter service: (body) Service to create. 

     - returns: RequestBuilder<Service> 
     */
    public class func servicesPostWithRequestBuilder(service service: Service) -> RequestBuilder<Service> {
        let path = "/services/"
        let URLString = SwaggerClientAPI.basePath + path
        let parameters = service.encodeToJSON() as? [String:AnyObject]
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<Service>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: URLString, parameters: convertedParameters, isBody: true)
    }

    /**

     - parameter id: (query) ID of the service to update 
     - parameter service: (body) New service data to set. 
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func servicesPut(id id: String, service: Service, completion: ((data: Response?, error: ErrorType?) -> Void)) {
        servicesPutWithRequestBuilder(id: id, service: service).execute { (response, error) -> Void in
            completion(data: response?.body, error: error);
        }
    }


    /**
     - PUT /services/
     - API Key:
       - type: apiKey APIKey 
       - name: APIKey
     - API Key:
       - type: apiKey accountid 
       - name: AccountID
     - examples: [{contentType=application/json, example={
  "approved" : 1.3579000000000001069366817318950779736042022705078125
}}]
     
     - parameter id: (query) ID of the service to update 
     - parameter service: (body) New service data to set. 

     - returns: RequestBuilder<Response> 
     */
    public class func servicesPutWithRequestBuilder(id id: String, service: Service) -> RequestBuilder<Response> {
        let path = "/services/"
        let URLString = SwaggerClientAPI.basePath + path
        let parameters = service.encodeToJSON() as? [String:AnyObject]
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<Response>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "PUT", URLString: URLString, parameters: convertedParameters, isBody: false)
    }

    /**

     - parameter id: (query) Will delete event attached to this serviceid (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func writeDelete(id id: String? = nil, completion: ((data: Response?, error: ErrorType?) -> Void)) {
        writeDeleteWithRequestBuilder(id: id).execute { (response, error) -> Void in
            completion(data: response?.body, error: error);
        }
    }


    /**
     - DELETE /write/
     - API Key:
       - type: apiKey APIKey 
       - name: APIKey
     - API Key:
       - type: apiKey accountid 
       - name: AccountID
     - examples: [{contentType=application/json, example={
  "approved" : 1.3579000000000001069366817318950779736042022705078125
}}]
     
     - parameter id: (query) Will delete event attached to this serviceid (optional)

     - returns: RequestBuilder<Response> 
     */
    public class func writeDeleteWithRequestBuilder(id id: String? = nil) -> RequestBuilder<Response> {
        let path = "/write/"
        let URLString = SwaggerClientAPI.basePath + path

        let nillableParameters: [String:AnyObject?] = [
            "id": id
        ]
 
        let parameters = APIHelper.rejectNil(nillableParameters)
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<Response>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "DELETE", URLString: URLString, parameters: convertedParameters, isBody: false)
    }

    /**

     - parameter eventRequest: (body) Event to upload 
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func writePost(eventRequest eventRequest: EventRequest, completion: ((data: Response?, error: ErrorType?) -> Void)) {
        writePostWithRequestBuilder(eventRequest: eventRequest).execute { (response, error) -> Void in
            completion(data: response?.body, error: error);
        }
    }


    /**
     - POST /write/
     - Will ovveride the current event of the specified service.
     - API Key:
       - type: apiKey APIKey 
       - name: APIKey
     - API Key:
       - type: apiKey accountid 
       - name: AccountID
     - examples: [{contentType=application/json, example={
  "approved" : 1.3579000000000001069366817318950779736042022705078125
}}]
     
     - parameter eventRequest: (body) Event to upload 

     - returns: RequestBuilder<Response> 
     */
    public class func writePostWithRequestBuilder(eventRequest eventRequest: EventRequest) -> RequestBuilder<Response> {
        let path = "/write/"
        let URLString = SwaggerClientAPI.basePath + path
        let parameters = eventRequest.encodeToJSON() as? [String:AnyObject]
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<Response>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: URLString, parameters: convertedParameters, isBody: true)
    }

}
